table 'Agent Abilities'
	lineageTag: ad905b38-f7e3-4c8c-bfd4-24fa7435df39

	column 'Agent Name'
		dataType: string
		lineageTag: e01adc19-290f-440a-bdcc-d935db931ae7
		summarizeBy: none
		sourceColumn: Agent Name

		annotation SummarizationSetBy = Automatic

	column 'Agent Abilities'
		dataType: string
		isHidden
		lineageTag: d22868d6-a36d-4afc-b9c5-3ac9c14e5615
		summarizeBy: none
		sourceColumn: Agent Abilities

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column Roles
		dataType: string
		lineageTag: f9721ac4-e864-4077-bd76-f7e1e810ac5c
		summarizeBy: none
		sourceColumn: Roles

		annotation SummarizationSetBy = Automatic

	column 'Roles Id'
		dataType: int64
		formatString: 0
		lineageTag: 443fb6a5-0a19-4de1-b5bf-9e435b223941
		summarizeBy: none
		sourceColumn: Roles Id

		annotation SummarizationSetBy = Automatic

	column 'Ability Names'
		dataType: string
		lineageTag: 46209ee3-a10a-4d4e-b961-52b91e5988be
		summarizeBy: none
		sourceColumn: Ability Names

		annotation SummarizationSetBy = Automatic

	partition 'Agent Abilities' = m
		mode: import
		source = ```
				let
				  Source = Csv.Document(
				    File.Contents("D:\Valorant Dataset\Data\AgentAbilities.csv"), 
				    [Delimiter = ",", Columns = 2, Encoding = 65001, QuoteStyle = QuoteStyle.None]
				  ), 
				  Custom1 = Table.PromoteHeaders(Source, [PromoteAllScalars = true]), 
				  #"Added Custom" = Table.AddColumn(
				    Custom1, 
				    "Roles", 
				    each 
				      let
				        roles = Text.Combine(
				          List.Select(Text.Split([Agent Name], " "), each Text.StartsWith(_, "("))
				        ), 
				        trimBrackets = Text.Replace(Text.Replace(roles, "(", ""), ")", "")
				      in
				        trimBrackets, 
				    type text
				  ), 
				  Custom2 = Table.AddColumn(
				    #"Added Custom", 
				    "Roles Id", 
				    each 
				      let
				        condition = {
				          [Roles] = "Controller", 
				          [Roles] = "Duelist", 
				          [Roles] = "Initiator", 
				          [Roles] = "Sentinel"
				        }, 
				        result = {1, 2, 3, 4}
				      in
				        result{List.PositionOf(condition, true)}, 
				    Int64.Type
				  ), 
				  #"Reordered Columns" = Table.ReorderColumns(
				    Custom2, 
				    {"Roles Id", "Agent Name", "Roles", "Agent Abilities"}
				  ), 
				  #"Added Custom1" = Table.AddColumn(
				    #"Reordered Columns", 
				    "Split Text", 
				    each Text.Split([Agent Abilities], ".")
				  ), 
				  #"Added Custom2" = Table.AddColumn(
				    #"Added Custom1", 
				    "Custom", 
				    each List.Select(
				      [Split Text], 
				      each Text.Contains(_, "(Passive")
				        or Text.Contains(_, "(Q)")
				        or Text.Contains(_, "(C)")
				        or Text.Contains(_, "(E)")
				        or Text.Contains(_, "(X)")
				    )
				  ),
				    // The below query was important to get Ability Names.
				    #"Removed Columns" = Table.RemoveColumns(#"Added Custom2",{"Split Text"}),
				    #"Expanded Custom" = Table.ExpandListColumn(#"Removed Columns", "Custom"),
				    #"Added Custom3" = Table.AddColumn(#"Expanded Custom", "Ability Names", each Text.BeforeDelimiter([Custom],"(")),
				    #"Trimmed Text" = Table.TransformColumns(#"Added Custom3",{{"Ability Names", Text.Trim, type text}}),
				    #"Removed Columns1" = Table.RemoveColumns(#"Trimmed Text",{"Custom"})
				in
				    #"Removed Columns1"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

